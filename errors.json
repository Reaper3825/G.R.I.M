{
  // ---------------- Filesystem ----------------
  "ERR_FS_MISSING_DIR": {
    "user": "[FS] Usage: cd/mkdir <directory>",
    "debug": "Filesystem command called without directory argument."
  },
  "ERR_FS_DIR_NOT_FOUND": {
    "user": "[FS] Directory does not exist.",
    "debug": "Target directory not found in cmdChangeDir."
  },
  "ERR_FS_CREATE_FAIL": {
    "user": "[FS] Failed to create directory.",
    "debug": "std::filesystem::create_directory returned false."
  },
  "ERR_FS_MISSING_FILE": {
    "user": "[FS] Usage: rm <file>",
    "debug": "cmdRemoveFile called without filename."
  },
  "ERR_FS_FILE_NOT_FOUND": {
    "user": "[FS] File not found.",
    "debug": "File path did not exist in cmdRemoveFile."
  },
  "ERR_FS_REMOVE_FAIL": {
    "user": "[FS] Failed to remove file.",
    "debug": "std::filesystem::remove returned false."
  },

  // ---------------- Memory ----------------
  "ERR_MEMORY_MISSING_INPUT": {
    "user": "[Memory] Nothing to remember.",
    "debug": "cmdRemember called without arguments."
  },
  "ERR_MEMORY_BAD_FORMAT": {
    "user": "[Memory] Usage: remember <key> <value>",
    "debug": "cmdRemember argument missing key/value format."
  },
  "ERR_MEMORY_MISSING_KEY": {
    "user": "[Memory] Usage: recall/forget <key>",
    "debug": "Memory command called without key argument."
  },
  "ERR_MEMORY_KEY_NOT_FOUND": {
    "user": "[Memory] Key not found.",
    "debug": "Requested key does not exist in longTermMemory."
  },

  // ---------------- Voice ----------------
  "ERR_VOICE_NO_SPEECH": {
    "user": "[Voice] No speech detected.",
    "debug": "Voice::runVoiceDemo returned empty transcript."
  },
  "ERR_VOICE_NO_CONTEXT": {
    "user": "[Voice] No Whisper context available.",
    "debug": "Voice::g_state.ctx was null when starting stream."
  },
  "ERR_VOICE_STREAM_FAIL": {
    "user": "[Voice] Failed to start streaming.",
    "debug": "VoiceStream::start returned false."
  },

  // ---------------- Timers ----------------
  "ERR_TIMER_MISSING_VALUE": {
    "user": "[Timer] Usage: set_timer <duration> (e.g. 30s, 5m, 2h30m)",
    "debug": "cmdSetTimer called without duration argument."
  },
  "ERR_TIMER_INVALID_VALUE": {
    "user": "[Timer] Invalid duration.",
    "debug": "cmdSetTimer could not parse duration string or value <= 0."
  },

  // ---------------- Core ----------------
  "ERR_CORE_UNKNOWN_COMMAND": {
    "user": "[Core] I don’t recognize that command. Try \"help\".",
    "debug": "User entered an unrecognized command. Check NLP rules or commandMap."
  },

  // ---------------- NLP ----------------
  "ERR_NLP_RELOAD_FAIL": {
    "user": "[NLP] Could not reload rules. Please check nlp_rules.json.",
    "debug": "g_nlp.load_rules failed due to missing or invalid JSON."
  },

  // ---------------- AI ----------------
  "ERR_AI_NO_QUERY": {
    "user": "[AI] You need to give me a query. Example: grim what is the weather?",
    "debug": "cmdGrimAi called with empty arg and no NLP slot value."
  },
  "ERR_AI_INVALID_BACKEND": {
    "user": "[AI] That backend is not supported. Try: openai, ollama, localai, or auto.",
    "debug": "cmdAiBackend or cmdGrimAi received unsupported backend argument."
  },
  "ERR_AI_QUERY_FAILED": {
    "user": "[AI] Something went wrong while processing your request.",
    "debug": "cmdGrimAi threw an exception while contacting backend."
  },

  // ---------------- Apps ----------------
  "ERR_APP_NO_ARGUMENT": {
    "user": "[App] Please specify an application to open. Example: open_app notepad",
    "debug": "cmdOpenApp called without argument."
  },
  "ERR_APP_UNKNOWN_ALIAS": {
    "user": "[App] I don’t recognize that application name.",
    "debug": "resolveAlias returned empty for requested application."
  },
  "ERR_APP_LAUNCH_FAILED": {
    "user": "[App] I couldn’t launch that application.",
    "debug": "ShellExecute (or platform equivalent) failed to open the app."
  },

  // ---------------- Web ----------------
  "ERR_WEB_NO_ARGUMENT": {
    "user": "[Web] Please provide a search query. Example: search_web grim project",
    "debug": "cmdSearchWeb called with empty argument."
  },
  "ERR_WEB_OPEN_FAILED": {
    "user": "[Web] I couldn’t open the browser to perform the search.",
    "debug": "ShellExecute (or platform equivalent) failed when opening URL."
  },

  // ---------------- Config ----------------
  "ERR_CONFIG_MALFORMED": {
    "user": "[Config] Invalid or missing ai_config.json — using defaults.",
    "debug": "ai_config.json contained null/invalid types and was patched by validateAIConfig()."
  },
  "ERR_CONFIG_SAVE_FAIL": {
    "user": "[Config] Failed to update ai_config.json.",
    "debug": "validateAIConfig() could not write patched configuration to disk."
  }
}
